pipeline {
    agent { label 'docker1' }
 environment {
 report_file="${WORKSPACE}/report"
 COMPILER="${COMP_NAME}"
 ARGU="${ARGUM}"
 	}  
stages {
		stage(bash) {
		steps {
		sh '''
		echo $COMPILER
		echo "creating image for $COMPILER"
		echo "building $COMPILER docker image" >> ${report_file}
		docker build -t bashimg:${BUILD_NUMBER} . 
		docker run bashimg:${BUILD_NUMBER} /bin/bash /home/doron/bashfile.sh $ARGU
		fi'''         			
	}
	}
	stage(python) {
		steps {
		sh '''
		echo $COMPILER
		if [ "$COMPILER" = "python" ] || [ "$COMPILER" = "all" ]; then
		echo "creating dockerfile for python code"
    		echo "creating docker imagefile for python code"
 	        echo "FROM python:3.7-alpine" > Dockerfile
	        echo "RUN mkdir /home/doron" >> Dockerfile
		echo "RUN cd /home/doron" >> Dockerfile
		echo "COPY ./scripts/pyfile.py /home/doron" >> Dockerfile
	        echo "running python file" 
	        echo "running python file" >> ${report_file}
		docker build -t pythonimg:${BUILD_NUMBER} . 
		docker run pythonimg:${BUILD_NUMBER} python /home/doron/pyfile.py $ARGU
		fi'''

		}
		}
	stage(cpp) {
		steps {
		sh '''
		echo $COMPILER
		if [ "$COMPILER" = "cpp" ] || [ "$COMPILER" = "all" ]; then
		echo "creating dockerfile for cpp code"
    		echo "creating docker imagefile for cpp code"
 	        echo "FROM frolvlad/alpine-gcc" > Dockerfile
	        echo "RUN mkdir /home/doron" >> Dockerfile
		echo "RUN cd /home/doron" >> Dockerfile
		echo "COPY ./scripts/cfile.c /home/doron" >> Dockerfile
		echo "RUN gcc  -o /home/doron/cfile.out /home/doron/cfile.c" >> Dockerfile
	        echo "running gcc on file" 
	        echo "running gcc on file" >> ${report_file}
		docker build -t cppimg:${BUILD_NUMBER} . 
		echo "running c file" 
	        echo "running c file" >> ${report_file}
		docker run cppimg:${BUILD_NUMBER} /home/doron/cfile.out $ARGU
		fi'''
		}
		}
	
	}
	}
